-- Lab | SQL Join (Part 2) -- Antonio Montilla --
USE sakila;

-- 1. List the number of films per category.
SELECT film_category.category_id as 'film category', COUNT(film.film_id) as 'number of films'
FROM film
JOIN film_category ON film.film_id = film_category.film_id
GROUP BY film_category.category_id
ORDER BY film_category.category_id;

-- 2. Retrieve the store ID, city, and country for each store.
SELECT s.store_id as 'store id', a.city_id as 'city id', c.city as 'city', co.country as 'country'
FROM store as s
JOIN address as a ON s.address_id = a.address_id
JOIN city as c ON a.city_id = c.city_id
JOIN country as co ON c.country_id = co.country_id
ORDER BY s.store_id;

-- 3. Calculate the total revenue generated by each store in dollars.
SELECT s.store_id as "store id", SUM(p.amount) as "total revenue"
FROM rental as r
JOIN payment as p ON r.rental_id = p.rental_id
JOIN staff as s ON r.staff_id = s.staff_id
GROUP BY s.store_id
ORDER BY s.store_id;

-- 4. Determine the average running time of films for each category.
SELECT film_category.category_id as 'film category', AVG(film.length) as 'average length'
FROM film
JOIN film_category ON film.film_id = film_category.film_id
GROUP BY film_category.category_id
ORDER BY film_category.category_id;


-- Bonus:

-- 5. Identify the film categories with the longest average running time.
-- will show the top 5 film categories with the longest average running time
SELECT film_category.category_id as 'film category', AVG(film.length) as 'average length'
FROM film
JOIN film_category ON film.film_id = film_category.film_id
GROUP BY film_category.category_id
ORDER BY AVG(film.length) DESC
LIMIT 5;


-- 6. Display the top 10 most frequently rented movies in descending order.
SELECT i.film_id as "film id", f.title as "title", COUNT(r.rental_id) as "number of rentals"
FROM rental as r
JOIN inventory as i ON r.inventory_id = i.inventory_id
JOIN film as f ON i.film_id = f.film_id
GROUP BY i.film_id
ORDER BY COUNT(r.rental_id) DESC;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT *
FROM inventory as i
JOIN film as f ON i.film_id = f.film_id
WHERE f.title = "Academy Dinosaur" AND i.store_id = 1 ; #There are 4 copies of "Academy Dinosaur" in the inventory of store 1


-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."

-- DISTINCT f.title
SELECT DISTINCT f.title,
CASE
WHEN ISNULL(i.inventory_id) THEN "NOT available" 
ELSE "Available"
END AS 'Inventory'
FROM film as f
LEFT JOIN inventory as i ON f.film_id = i.film_id 
ORDER BY f.title;
